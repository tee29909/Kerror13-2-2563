#pragma checksum "C:\Users\admin\Desktop\tital\tbkkData\tbkkData\Pages\WhiteWall\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "23636771116313cf3185af8ee409f170819fc80a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(tbkkData.Pages.WhiteWall.Pages_WhiteWall_Index), @"mvc.1.0.razor-page", @"/Pages/WhiteWall/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/WhiteWall/Index.cshtml", typeof(tbkkData.Pages.WhiteWall.Pages_WhiteWall_Index), null)]
namespace tbkkData.Pages.WhiteWall
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\admin\Desktop\tital\tbkkData\tbkkData\Pages\_ViewImports.cshtml"
using tbkkData;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"23636771116313cf3185af8ee409f170819fc80a", @"/Pages/WhiteWall/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"795d3c344c43d29ae361a89746d7c90e1cb3c17d", @"/Pages/_ViewImports.cshtml")]
    public class Pages_WhiteWall_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(51, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 4 "C:\Users\admin\Desktop\tital\tbkkData\tbkkData\Pages\WhiteWall\Index.cshtml"
  
    ViewData["Title"] = "Index";

#line default
#line hidden
            BeginContext(94, 89, true);
            WriteLiteral("\r\n<script>\r\n                                document.getElementById(\"name\").innerHTML = \"");
            EndContext();
            BeginContext(184, 39, false);
#line 9 "C:\Users\admin\Desktop\tital\tbkkData\tbkkData\Pages\WhiteWall\Index.cshtml"
                                                                        Write(Model.Employees[0].FirstName.ToString());

#line default
#line hidden
            EndContext();
            BeginContext(223, 85, true);
            WriteLiteral("\";\r\n                                document.getElementById(\"lastname\").innerHTML = \"");
            EndContext();
            BeginContext(309, 38, false);
#line 10 "C:\Users\admin\Desktop\tital\tbkkData\tbkkData\Pages\WhiteWall\Index.cshtml"
                                                                            Write(Model.Employees[0].LastName.ToString());

#line default
#line hidden
            EndContext();
            BeginContext(347, 85, true);
            WriteLiteral("\";\r\n                                document.getElementById(\"position\").innerHTML = \"");
            EndContext();
            BeginContext(433, 51, false);
#line 11 "C:\Users\admin\Desktop\tital\tbkkData\tbkkData\Pages\WhiteWall\Index.cshtml"
                                                                            Write(Model.Employees[0].Position.PositionName.ToString());

#line default
#line hidden
            EndContext();
            BeginContext(484, 82, true);
            WriteLiteral("\";\r\n                                document.getElementById(\"name1\").innerHTML = \"");
            EndContext();
            BeginContext(567, 39, false);
#line 12 "C:\Users\admin\Desktop\tital\tbkkData\tbkkData\Pages\WhiteWall\Index.cshtml"
                                                                         Write(Model.Employees[0].FirstName.ToString());

#line default
#line hidden
            EndContext();
            BeginContext(606, 86, true);
            WriteLiteral("\";\r\n                                document.getElementById(\"lastname1\").innerHTML = \"");
            EndContext();
            BeginContext(693, 38, false);
#line 13 "C:\Users\admin\Desktop\tital\tbkkData\tbkkData\Pages\WhiteWall\Index.cshtml"
                                                                             Write(Model.Employees[0].LastName.ToString());

#line default
#line hidden
            EndContext();
            BeginContext(731, 86, true);
            WriteLiteral("\";\r\n                                document.getElementById(\"position1\").innerHTML = \"");
            EndContext();
            BeginContext(818, 51, false);
#line 14 "C:\Users\admin\Desktop\tital\tbkkData\tbkkData\Pages\WhiteWall\Index.cshtml"
                                                                             Write(Model.Employees[0].Position.PositionName.ToString());

#line default
#line hidden
            EndContext();
            BeginContext(869, 1326, true);
            WriteLiteral(@""";
</script>

<link rel=""stylesheet"" href=""https://fonts.googleapis.com/icon?family=Material+Icons"">
<link rel=""stylesheet"" href=""https://www.w3schools.com/w3css/4/w3.css"">
<link rel=""stylesheet"" href=""https://uicdn.toast.com/tui.chart/latest/tui-chart.min.css"">
<link rel=""stylesheet"" href=""https://www.gstatic.com/charts/loader.js"">

<!--CanvasJS Chart-->
<script src=""https://canvasjs.com/assets/script/canvasjs.min.js""></script>
<script type=""text/javascript"" src=""https://www.gstatic.com/charts/loader.js""></script>
<script src=""https://code.jquery.com/jquery.js""></script>
<script src=""Scripts/bootstrap.js""></script>
<script src=""https://canvasjs.com/assets/script/canvasjs.min.js""></script>

<div id=""content-wrapper"">

    <div class=""container-fluid"">
        <div class=""alert alert-info text-md-center font-weight-bold"" role=""alert"">White Wall</div>
        <br />
        <div class=""row state-overview center-block"">
            <div class=""col-lg-6 col-sm-6"">
                <section cl");
            WriteLiteral(@"ass=""card"" style=""background-color:#B67F60"">
                    <div class=""symbol terques"" style=""background-color:#022E5A"">
                        <i class=""fa fa-book""></i>
                    </div>
                    <div class=""value"">
                        <h1 class=""count text-dark"">");
            EndContext();
            BeginContext(2196, 36, false);
#line 41 "C:\Users\admin\Desktop\tital\tbkkData\tbkkData\Pages\WhiteWall\Index.cshtml"
                                               Write(Model.Project.Count().ToString("N0"));

#line default
#line hidden
            EndContext();
            BeginContext(2232, 7774, true);
            WriteLiteral(@"</h1>
                        <p class=""text-dark"">Campaign</p>
                    </div>
                </section>
            </div>


        </div>

        <div class=""row"">
            <!-- Survey Operators -->
            <div class=""col"" style=""height:360px; width:100%"">
                <div class=""card shadow"">
                    <div class=""card-body"" style=""border:hidden"">
                        <div id=""SurveyOperators"" style=""height: 300px; width: 100%;""></div>
                    </div>
                </div>
            </div>
            <div class=""col"">
                <div class=""col"" style=""height:360px; width:100%"">
                    <!-- Delivery -->
                    <div class=""card shadow"">
                        <div class=""card-body"" style=""border:hidden"">
                            <div id=""Delivery"" style=""height: 300px; width: 100%;""></div>
                        </div>
                    </div>
                </div>
            </div>
   ");
            WriteLiteral(@"     </div>

    </div>
</div>




<script>

    var ctx1 = document.getElementById(""chartContainer"");
    console.log(ctx1)
    var chart = new CanvasJS.Chart(""chartContainer"", {
        animationEnabled: true,
        exportEnabled: true,
        theme: ""light2"",
        //title: {
        //    text: ""Advertisement Risk Pyramid""
        //},
        data: [{
            type: ""pyramid"",
            toolTipContent: ""<b>{label}</b>: {y}%"",
            indexLabelFontColor: ""#5A5757"",
            indexLabelFontSize: 16,
            indexLabel: ""{label}({y}%)"",
            indexLabelPlacement: ""inside"",
            dataPoints: [
                { y: 15, label: ""Pay Per Click Advertising"" },
                { y: 25, label: ""Website Sponsorship"" },
                { y: 25, label: ""Banner Advertising"" },
                { y: 40, label: ""Interactive Advertising"" },
                { y: 60, label: ""Traditional Media"" }
            ]
        }]
    });
    chart.render();


</scr");
            WriteLiteral(@"ipt>
<script>

    var ctx = document.getElementById(""chartContainer1"");
    console.log(ctx)
    var chart = new CanvasJS.Chart(""chartContainer1"", {
        animationEnabled: true,
        //title: {
        //    text: ""Crude Oil Reserves vs Production, 2016""
        //},
        axisY: {
            title: ""Billions of Barrels"",
            titleFontColor: ""#4F81BC"",
            lineColor: ""#4F81BC"",
            labelFontColor: ""#4F81BC"",
            tickColor: ""#4F81BC""
        },
        axisY2: {
            title: ""Millions of Barrels/day"",
            titleFontColor: ""#C0504E"",
            lineColor: ""#C0504E"",
            labelFontColor: ""#C0504E"",
            tickColor: ""#C0504E""
        },
        toolTip: {
            shared: true
        },
        legend: {
            cursor: ""pointer"",
            itemclick: toggleDataSeries
        },
        data: [{
            type: ""column"",
            name: ""Proven Oil Reserves (bn)"",
            legendText: ""Proven Oi");
            WriteLiteral(@"l Reserves"",
            showInLegend: true,
            dataPoints: [
                { label: ""Saudi"", y: 266.21 },
                { label: ""Venezuela"", y: 302.25 },
                { label: ""Iran"", y: 157.20 },
                { label: ""Iraq"", y: 148.77 },
                { label: ""Kuwait"", y: 101.50 },
                { label: ""UAE"", y: 97.8 }
            ]
        },
        {
            type: ""column"",
            name: ""Oil Production (million/day)"",
            legendText: ""Oil Production"",
            axisYType: ""secondary"",
            showInLegend: true,
            dataPoints: [
                { label: ""Saudi"", y: 10.46 },
                { label: ""Venezuela"", y: 2.27 },
                { label: ""Iran"", y: 3.99 },
                { label: ""Iraq"", y: 4.45 },
                { label: ""Kuwait"", y: 2.92 },
                { label: ""UAE"", y: 3.1 }
            ]
        }]
    });
    chart.render();

    function toggleDataSeries(e) {
        if (typeof (e.dataSeries.vi");
            WriteLiteral(@"sible) === ""undefined"" || e.dataSeries.visible) {
            e.dataSeries.visible = false;
        }
        else {
            e.dataSeries.visible = true;
        }
        chart.render();
    }

</script>
<script>
    var ctx3 = document.getElementById(""chartContainer3"");
    console.log(ctx3)
    var chart = new CanvasJS.Chart(""chartContainer3"", {
        exportEnabled: true,
        animationEnabled: true,
        //title: {
        //    text: ""State Operating Funds""
        //},
        legend: {
            cursor: ""pointer"",
            itemclick: explodePie
        },
        data: [{
            type: ""pie"",
            showInLegend: true,
            toolTipContent: ""{name}: <strong>{y}%</strong>"",
            indexLabel: ""{name} - {y}%"",
            dataPoints: [
                { y: 26, name: ""School Aid"", exploded: true },
                { y: 20, name: ""Medical Aid"" },
                { y: 5, name: ""Debt/Capital"" },
                { y: 3, name: ""Elected Offici");
            WriteLiteral(@"als"" },
                { y: 7, name: ""University"" },
                { y: 17, name: ""Executive"" },
                { y: 22, name: ""Other Local Assistance"" }
            ]
        }]
    });
    chart.render();


    function explodePie(e) {
        if (typeof (e.dataSeries.dataPoints[e.dataPointIndex].exploded) === ""undefined"" || !e.dataSeries.dataPoints[e.dataPointIndex].exploded) {
            e.dataSeries.dataPoints[e.dataPointIndex].exploded = true;
        } else {
            e.dataSeries.dataPoints[e.dataPointIndex].exploded = false;
        }
        e.chart.render();
    }

</script>
<script>
    var ctx4 = document.getElementById(""chartContainer4"");
    console.log(ctx4)
    var chart = new CanvasJS.Chart(""chartContainer4"", {
        //title: {
        //    text: ""Customer Complaints""
        //},
        axisY: {
            title: ""Number of Reviews"",
            lineColor: ""#4F81BC"",
            tickColor: ""#4F81BC"",
            labelFontColor: ""#4F81BC"",
       ");
            WriteLiteral(@"     gridThickness: 0
        },
        axisY2: {
            title: ""Percent"",
            suffix: ""%"",
            gridThickness: 0,
            lineColor: ""#C0504E"",
            tickColor: ""#C0504E"",
            labelFontColor: ""#C0504E""
        },
        data: [{
            type: ""column"",
            dataPoints: [
                { label: ""Parking"", y: 3050 },
                { label: ""Rude Sales Rep."", y: 1100 },
                { label: ""Poor Lighting"", y: 850 },
                { label: ""Confusing Layout"", y: 480 },
                { label: ""Limited Size"", y: 350 },
                { label: ""Faded Clothes"", y: 180 },
                { label: ""Shrank Clothes"", y: 120 }
            ]
        }]
    });
    chart.render();
    createPareto();

    function createPareto() {
        var dps = [];
        var yValue, yTotal = 0, yPercent = 0;

        for (var i = 0; i < chart.data[0].dataPoints.length; i++)
            yTotal += chart.data[0].dataPoints[i].y;

        fo");
            WriteLiteral(@"r (var i = 0; i < chart.data[0].dataPoints.length; i++) {
            yValue = chart.data[0].dataPoints[i].y;
            yPercent += (yValue / yTotal * 100);
            dps.push({ label: chart.data[0].dataPoints[i].label, y: yPercent });
        }
        chart.addTo(""data"", { type: ""line"", axisYType: ""secondary"", yValueFormatString: ""0.##\""%\"""", indexLabel: ""{y}"", indexLabelFontColor: ""#C24642"", dataPoints: dps });
        chart.axisY[0].set(""maximum"", yTotal, false);
        chart.axisY2[0].set(""maximum"", 105, false);
        chart.axisY2[0].set(""interval"", 25);
    }


</script>

");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(10024, 2, true);
                WriteLiteral("\r\n");
                EndContext();
                BeginContext(10051, 2082, true);
                WriteLiteral(@"    <script>
        var options1 = {
            animationEnabled: true,
            title: {
                text: ""Survey to line operators""
            },
            axisX: {
                interval: 1,
            },
            axisY: {
                suffix: ""%""
            },
            toolTip: {
                shared: true
            },
            legend: {
                reversed: true,
                verticalAlign: ""center"",
                horizontalAlign: ""right""
            },
            data: []

        };
        var ctx5 = document.getElementById(""SurveyOperators"");
        $().ready(function () {
            {
                $.get('/api/SurveyOperators').done(function (response) {
                    let data = {
                        type: ""stackedColumn100"",
                        name: ""Open"",
                        showInLegend: true,
                        indexLabel: ""{y}"",
                        yValueFormatString: ""#,##0"",
         ");
                WriteLiteral(@"               dataPoints: []
                    };
                    $.each(response[0], function (index, d) {
                        data.dataPoints.push({ y: d.y, x: d.x });
                    })
                    console.log(data);
                    options1.data.push(data);

                    data2 = {
                        type: ""stackedColumn100"",
                        name: ""Close"",
                        showInLegend: true,
                        indexLabel: ""{y}"",
                        yValueFormatString: ""#,##0"",
                        dataPoints: []
                    };
                    $.each(response[1], function (index, d) {
                        data2.dataPoints.push({ y: d.y, x: d.x });
                    })
                    options1.data.push(data2);
                    console.log(data2);

                    var chart = new CanvasJS.Chart(""SurveyOperators"", options1);
                    chart.render();
                });
           ");
                WriteLiteral(" }\r\n        });\r\n    </script>\r\n\r\n");
                EndContext();
                BeginContext(12163, 2076, true);
                WriteLiteral(@"    <script>
        var options2 = {
            animationEnabled: true,
            title: {
                text: ""Delivery Improvement""
            },
            axisX: {
                valueFormatString: ""MMM""
            },
            axisY: {

            },
            toolTip: {
                shared: true
            },
            legend: {
                reversed: true,
                verticalAlign: ""center"",
                horizontalAlign: ""right""
            },
            data: []
        };
        var ctx6 = document.getElementById(""Delivery"");
        $().ready(function () {
            {
                $.get('/api/Delivery_performance').done(function (response) {
                    let data3 = {
                        type: ""stackedColumn"",
                        name: ""Complian"",
                        showInLegend: true,
                        indexLabel: ""{y}"",
                        yValueFormatString: ""#,##0"",
                        dataPo");
                WriteLiteral(@"ints: []
                    };
                    $.each(response[0], function (index, d) {
                        data3.dataPoints.push({ y: d.y, x: new Date(d.x) });
                    })
                    console.log(data3);
                    options2.data.push(data3);

                    data4 = {
                        type: ""stackedColumn"",
                        name: ""Claim"",
                        showInLegend: true,
                        indexLabel: ""{y}"",
                        yValueFormatString: ""#,##0"",
                        dataPoints: []
                    };
                    $.each(response[1], function (index, d) {
                        data4.dataPoints.push({ y: d.y, x: new Date(d.x) });
                    })
                    options2.data.push(data4);
                    console.log(data4);

                    var chart = new CanvasJS.Chart(""Delivery"", options2);
                    chart.render();
                });
            }
    ");
                WriteLiteral("    });\r\n    </script>\r\n    ");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<tbkkData.Pages.WhiteWall.IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<tbkkData.Pages.WhiteWall.IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<tbkkData.Pages.WhiteWall.IndexModel>)PageContext?.ViewData;
        public tbkkData.Pages.WhiteWall.IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
